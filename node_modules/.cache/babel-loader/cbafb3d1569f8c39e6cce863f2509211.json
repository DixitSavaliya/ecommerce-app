{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ecommerce-app/src/Component/printbutton/printbutton.js\";\nimport React from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\nclass PrintButton extends React.Component {\n  componentDidMount() {\n    const pxToMm = px => {\n      return Math.floor(px / document.getElementById('myMm').offsetHeight);\n    };\n\n    const mmToPx = mm => {\n      return document.getElementById('myMm').offsetHeight * mm;\n    };\n\n    const range = (start, end) => {\n      return Array(end - start).join(0).split(0).map(function (val, id) {\n        return id + start;\n      });\n    };\n\n    const PrintButton = ({\n      id,\n      label\n    }) => React.createElement(\"div\", {\n      className: \"tc mb4 mt2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"myMm\",\n      style: {\n        height: \"1mm\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\",\n      onClick: () => {\n        const input = document.getElementById(id);\n        const inputHeightMm = pxToMm(input.offsetHeight);\n        const a4WidthMm = 210;\n        const a4HeightMm = 297;\n        const a4HeightPx = mmToPx(a4HeightMm);\n        const numPages = inputHeightMm <= a4HeightMm ? 1 : Math.floor(inputHeightMm / a4HeightMm) + 1;\n        console.log({\n          input,\n          inputHeightMm,\n          a4HeightMm,\n          a4HeightPx,\n          numPages,\n          range: range(0, numPages),\n          comp: inputHeightMm <= a4HeightMm,\n          inputHeightPx: input.offsetHeight\n        });\n        html2canvas(input).then(canvas => {\n          const imgData = canvas.toDataURL('image/png'); // Document of a4WidthMm wide and inputHeightMm high\n\n          if (inputHeightMm > a4HeightMm) {\n            // elongated a4 (system print dialog will handle page breaks)\n            const pdf = new jsPDF('p', 'mm', [inputHeightMm + 16, a4WidthMm]);\n          } else {\n            // standard a4\n            const pdf = new jsPDF();\n          }\n\n          pdf.addImage(imgData, 'PNG', 0, 0);\n          pdf.save(\"\".concat(id, \".pdf\"));\n        });\n        ; ////////////////////////////////////////////////////////\n        // System to manually handle page breaks\n        // Wasn't able to get it working !\n        // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n        // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n        ////////////////////////////////////////////////////////\n        // range(0, numPages).forEach((page) => {\n        //   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n        //   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n        //     .then((canvas) => {\n        //       const imgData = canvas.toDataURL('image/png');\n        //       console.log(imgData)\n        //       if (page > 0) {\n        //         pdf.addPage();\n        //       }\n        //       pdf.addImage(imgData, 'PNG', 0, 0);\n        //     });\n        //   ;\n        // });\n        // setTimeout(() => {\n        //   pdf.save(`${id}.pdf`);\n        // }, 5000);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, label));\n  }\n\n}\n\nexport default PrintButton;","map":{"version":3,"sources":["/var/www/html/ecommerce-app/src/Component/printbutton/printbutton.js"],"names":["React","html2canvas","jsPDF","PrintButton","Component","componentDidMount","pxToMm","px","Math","floor","document","getElementById","offsetHeight","mmToPx","mm","range","start","end","Array","join","split","map","val","id","label","height","input","inputHeightMm","a4WidthMm","a4HeightMm","a4HeightPx","numPages","console","log","comp","inputHeightPx","then","canvas","imgData","toDataURL","pdf","addImage","save"],"mappings":"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","sourcesContent":["import React from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\nclass PrintButton extends React.Component {\n\n    componentDidMount() {\n        const pxToMm = (px) => {\n            return Math.floor(px / document.getElementById('myMm').offsetHeight);\n        };\n\n        const mmToPx = (mm) => {\n            return document.getElementById('myMm').offsetHeight * mm;\n        };\n\n        const range = (start, end) => {\n            return Array(end - start).join(0).split(0).map(function (val, id) { return id + start });\n        };\n\n        const PrintButton = ({ id, label }) => (<div className=\"tc mb4 mt2\">\n            {/*\n              Getting pixel height in milimeters:\n              https://stackoverflow.com/questions/7650413/pixel-to-mm-equation/27111621#27111621\n            */}\n            <div id=\"myMm\" style={{ height: \"1mm\" }} />\n\n\n            <div\n                className=\"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\"\n                onClick={() => {\n                    const input = document.getElementById(id);\n                    const inputHeightMm = pxToMm(input.offsetHeight);\n                    const a4WidthMm = 210;\n                    const a4HeightMm = 297;\n                    const a4HeightPx = mmToPx(a4HeightMm);\n                    const numPages = inputHeightMm <= a4HeightMm ? 1 : Math.floor(inputHeightMm / a4HeightMm) + 1;\n                    console.log({\n                        input, inputHeightMm, a4HeightMm, a4HeightPx, numPages, range: range(0, numPages),\n                        comp: inputHeightMm <= a4HeightMm, inputHeightPx: input.offsetHeight\n                    });\n\n\n                    html2canvas(input)\n                        .then((canvas) => {\n                            const imgData = canvas.toDataURL('image/png');\n\n                            // Document of a4WidthMm wide and inputHeightMm high\n                            if (inputHeightMm > a4HeightMm) {\n                                // elongated a4 (system print dialog will handle page breaks)\n                                const pdf = new jsPDF('p', 'mm', [inputHeightMm + 16, a4WidthMm]);\n                            } else {\n                                // standard a4\n                                const pdf = new jsPDF();\n                            }\n                            pdf.addImage(imgData, 'PNG', 0, 0);\n                            pdf.save(`${id}.pdf`);\n                        });\n                    ;\n\n                    ////////////////////////////////////////////////////////\n                    // System to manually handle page breaks\n                    // Wasn't able to get it working !\n                    // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n                    // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n                    ////////////////////////////////////////////////////////\n                    // range(0, numPages).forEach((page) => {\n                    //   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n                    //   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n                    //     .then((canvas) => {\n                    //       const imgData = canvas.toDataURL('image/png');\n                    //       console.log(imgData)\n                    //       if (page > 0) {\n                    //         pdf.addPage();\n                    //       }\n                    //       pdf.addImage(imgData, 'PNG', 0, 0);\n                    //     });\n                    //   ;\n                    // });\n\n                    // setTimeout(() => {\n                    //   pdf.save(`${id}.pdf`);\n                    // }, 5000);\n\n\n                }}\n            >\n                {label}\n            </div>\n        </div>);\n    }\n\n\n}\n\n\n\nexport default PrintButton;"]},"metadata":{},"sourceType":"module"}