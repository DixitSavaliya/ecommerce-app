{"ast":null,"code":"import axios from 'axios';\nimport NavigationService from './service/homeservice';\naxios.interceptors.request.use(config => {\n  // Do something before request is sent\n  // console.log('config in interseptor======================>', config.url);\n  // const urlArray = config.url.split('/');\n  // console.log(\"urlArray==============>\", urlArray);\n  // if (urlArray[urlArray.length - 1] === 'login' || urlArray[urlArray.length - 1] === 'signUp') {\n  //     return config;\n  // }\n  //If the header does not contain the token and the url not public, redirect to login\n  const token = localStorage.getItem('token'); // console.log('curuuntuser---------------------------->', JSON.parse(curruntUser).token);\n\n  console.log('token-=-=', token); // const token = JSON.parse(curruntUser).token;\n  // if token is found add it to the header\n\n  if (token) {\n    if (config.method !== 'OPTIONS') {\n      config.headers.Authorization = token;\n    }\n  } // console.log('config in interseptor====={{{}}}===========>', config)\n\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.log('how are you error: ', error);\n  return promise.reject(error);\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // const originalRequest = error.config\n  console.log(\"error in interceptors=============>\", error); // token expired\n\n  if (error.response.status === 401 && (error.response.data == \"Unauthorized: Invalid token\" || error.response.data == \"Unauthorized: No token provided\")) {\n    localStorage.setItem('token', '');\n    const token = localStorage.getItem('token');\n    console.log(']]]]]]]]]]]]]]]]]]', token);\n    alert(error.response.data);\n    NavigationService.navigate('login');\n  } else {\n    return Promise.reject(error);\n  }\n});\nexport default axios;","map":{"version":3,"sources":["/var/www/html/ecommerce-app/src/intercept.js"],"names":["axios","NavigationService","interceptors","request","use","config","token","localStorage","getItem","console","log","method","headers","Authorization","error","promise","reject","response","status","data","setItem","alert","navigate","Promise"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AACAD,KAAK,CAACE,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CATwC,CAUxC;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,KAAzB,EAXwC,CAYxC;AACA;;AACA,MAAIA,KAAJ,EAAW;AACP,QAAID,MAAM,CAACM,MAAP,KAAkB,SAAtB,EAAiC;AAC7BN,MAAAA,MAAM,CAACO,OAAP,CAAeC,aAAf,GAA+BP,KAA/B;AACH;AACJ,GAlBuC,CAmBxC;;;AACA,SAAOD,MAAP;AACF,CArBD,EAqBG,UAAUS,KAAV,EAAiB;AACjB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCI,KAAnC;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACF,CAzBD;AA0BAd,KAAK,CAACE,YAAN,CAAmBe,QAAnB,CAA4Bb,GAA5B,CACIa,QAAD,IAAc;AACV,SAAOA,QAAP;AACH,CAHJ,EAIKH,KAAD,IAAW;AACR;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDI,KAAnD,EAFQ,CAGR;;AACA,MAAIA,KAAK,CAACG,QAAN,CAAeC,MAAf,KAA0B,GAA1B,KAAkCJ,KAAK,CAACG,QAAN,CAAeE,IAAf,IAAuB,6BAAvB,IAAwDL,KAAK,CAACG,QAAN,CAAeE,IAAf,IAAuB,iCAAjH,CAAJ,EAAyJ;AACrJZ,IAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8B,EAA9B;AACA,UAAMd,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,KAAlC;AACAe,IAAAA,KAAK,CAACP,KAAK,CAACG,QAAN,CAAeE,IAAhB,CAAL;AACAlB,IAAAA,iBAAiB,CAACqB,QAAlB,CAA2B,OAA3B;AACH,GAND,MAMO;AACH,WAAOC,OAAO,CAACP,MAAR,CAAeF,KAAf,CAAP;AACH;AACJ,CAjBJ;AAmBA,eAAed,KAAf","sourcesContent":["import axios from 'axios';\nimport NavigationService from './service/homeservice';\naxios.interceptors.request.use((config) => {\n   // Do something before request is sent\n   // console.log('config in interseptor======================>', config.url);\n   // const urlArray = config.url.split('/');\n   // console.log(\"urlArray==============>\", urlArray);\n   // if (urlArray[urlArray.length - 1] === 'login' || urlArray[urlArray.length - 1] === 'signUp') {\n   //     return config;\n   // }\n   //If the header does not contain the token and the url not public, redirect to login\n   const token = localStorage.getItem('token')\n   // console.log('curuuntuser---------------------------->', JSON.parse(curruntUser).token);\n   console.log('token-=-=', token);\n   // const token = JSON.parse(curruntUser).token;\n   // if token is found add it to the header\n   if (token) {\n       if (config.method !== 'OPTIONS') {\n           config.headers.Authorization = token;\n       }\n   }\n   // console.log('config in interseptor====={{{}}}===========>', config)\n   return config;\n}, function (error) {\n   // Do something with request error\n   console.log('how are you error: ', error);\n   return promise.reject(error);\n});\naxios.interceptors.response.use(\n   (response) => {\n       return response\n   },\n    (error) => {\n       // const originalRequest = error.config\n       console.log(\"error in interceptors=============>\", error);\n       // token expired\n       if (error.response.status === 401 && (error.response.data == \"Unauthorized: Invalid token\" || error.response.data == \"Unauthorized: No token provided\")) {\n           localStorage.setItem('token', '');\n           const token = localStorage.getItem('token')\n           console.log(']]]]]]]]]]]]]]]]]]', token);\n           alert(error.response.data);\n           NavigationService.navigate('login');\n       } else {\n           return Promise.reject(error)\n       }\n   }\n)\nexport default axios;"]},"metadata":{},"sourceType":"module"}