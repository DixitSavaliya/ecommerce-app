{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ecommerce-app/src/Component/forgotpassword/forgotpassword.js\";\nimport React from 'react';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport API from '../../service/homeservice';\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\nimport Swal from 'sweetalert2';\n\nclass ForgotPassword extends React.Component {\n  /** First Constructor Call */\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.validate = () => {\n      let emailError = \"\";\n      const reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n      if (!reg.test(this.state.emailId)) {\n        emailError = \"invalid email\";\n      }\n\n      if (emailError) {\n        this.setState({\n          emailError\n        });\n        return false;\n      }\n\n      return true;\n    };\n\n    this.state = {\n      emailId: '',\n      emailError: '',\n      modal: false\n    };\n    this.forgotpassword = this.forgotpassword.bind(this);\n    this.handleChangeEvent = this.handleChangeEvent.bind(this);\n  }\n  /** first this method call when app run */\n\n\n  componentDidMount() {\n    this.toggle();\n  }\n  /** Model Open */\n\n\n  /** onChange event  */\n  handleChangeEvent(event) {\n    event.preventDefault();\n    const state = this.state;\n    state[event.target.name] = event.target.value;\n    this.setState(state);\n  }\n  /** validation of forgotpassword */\n\n\n  /** ForgotPassword function*/\n  forgotpassword() {\n    const isValid = this.validate();\n\n    if (isValid) {\n      console.log(this.state);\n      this.setState({\n        emailId: '',\n        emailError: ''\n      });\n    }\n\n    ;\n\n    if (this.state.emailId) {\n      const obj = {\n        emailId: this.state.emailId\n        /** Forgot password */\n\n      };\n      API.ForgotPassword(obj).then(findresponse => {\n        Swal.fire(\"Email sent Successfully!\", \"\", \"success\");\n        this.setState({\n          modal: false\n        });\n      }).catch({\n        status: 500,\n        message: 'Internal Server Error'\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(MDBContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(MDBModal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(MDBModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"ForgotPassword\"), React.createElement(MDBModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"grey-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Enter Your email\"), React.createElement(\"input\", {\n      type: \"email\",\n      name: \"emailId\",\n      className: \"form-control\",\n      value: this.state.emailId,\n      onChange: this.handleChangeEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        fontSize: 12,\n        color: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.emailError), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }))), React.createElement(MDBModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(MDBBtn, {\n      color: \"primary\",\n      onClick: this.forgotpassword,\n      disabled: !this.state.emailId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Send\")))));\n  }\n\n}\n\nexport default ForgotPassword;","map":{"version":3,"sources":["/var/www/html/ecommerce-app/src/Component/forgotpassword/forgotpassword.js"],"names":["React","API","MDBContainer","MDBBtn","MDBModal","MDBModalBody","MDBModalHeader","MDBModalFooter","Swal","ForgotPassword","Component","constructor","props","toggle","setState","modal","state","validate","emailError","reg","test","emailId","forgotpassword","bind","handleChangeEvent","componentDidMount","event","preventDefault","target","name","value","isValid","console","log","obj","then","findresponse","fire","catch","status","message","render","fontSize","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport API from '../../service/homeservice';\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\nimport Swal from 'sweetalert2';\n\nclass ForgotPassword extends React.Component {\n\n    /** First Constructor Call */\n    constructor(props) {\n        super(props);\n        this.state = {\n            emailId: '',\n            emailError: '',\n            modal: false\n        }\n        this.forgotpassword = this.forgotpassword.bind(this);\n        this.handleChangeEvent = this.handleChangeEvent.bind(this);\n    }\n\n    /** first this method call when app run */\n    componentDidMount() {\n        this.toggle();\n    }\n\n    /** Model Open */\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    /** onChange event  */\n    handleChangeEvent(event) {\n        event.preventDefault();\n        const state = this.state\n        state[event.target.name] = event.target.value;\n        this.setState(state);\n    }\n\n    /** validation of forgotpassword */\n    validate = () => {\n        let emailError = \"\";\n\n        const reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        if (!reg.test(this.state.emailId)) {\n            emailError = \"invalid email\";\n        }\n\n        if (emailError) {\n            this.setState({ emailError });\n            return false;\n        }\n        return true;\n    };\n\n    /** ForgotPassword function*/\n    forgotpassword() {\n        const isValid = this.validate();\n        if (isValid) {\n            console.log(this.state);\n            this.setState({\n                emailId: '',\n                emailError: ''\n            })\n        };\n        if (this.state.emailId) {\n            const obj = {\n                emailId: this.state.emailId\n            }\n            /** Forgot password */\n            API.ForgotPassword(obj).\n                then((findresponse) => {\n                    Swal.fire(\"Email sent Successfully!\", \"\", \"success\");\n                    this.setState({ modal: false })\n                }).catch({ status: 500, message: 'Internal Server Error' });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <MDBContainer>\n                    <MDBModal isOpen={this.state.modal} toggle={this.toggle}>\n                        <MDBModalHeader toggle={this.toggle}>ForgotPassword</MDBModalHeader>\n                        <MDBModalBody>\n                            <form>\n                                <label className=\"grey-text\">\n                                    Enter Your email\n                          </label>\n                                <input\n                                    type=\"email\"\n                                    name=\"emailId\"\n                                    className=\"form-control\"\n                                    value={this.state.emailId}\n                                    onChange={this.handleChangeEvent}\n                                />\n                                <div style={{ fontSize: 12, color: \"red\" }}>\n                                    {this.state.emailError}\n                                </div>\n                                <br />\n                            </form>\n                        </MDBModalBody>\n                        <MDBModalFooter>\n                            <MDBBtn color=\"primary\" onClick={this.forgotpassword} disabled={!this.state.emailId}>Send</MDBBtn>\n                        </MDBModalFooter>\n                    </MDBModal>\n                </MDBContainer>\n            </div>\n        );\n    }\n}\n\nexport default ForgotPassword;\n"]},"metadata":{},"sourceType":"module"}