{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ecommerce-app/src/Component/printbutton/printbutton.js\";\nimport React from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\nconst pxToMm = px => {\n  return Math.floor(px / document.getElementById('myMm').offsetHeight);\n};\n\nconst mmToPx = mm => {\n  return document.getElementById('myMm').offsetHeight * mm;\n};\n\nconst range = (start, end) => {\n  return Array(end - start).join(0).split(0).map(function (val, id) {\n    return id + start;\n  });\n};\n\nhtml2canvas(input).then(canvas => {\n  const imgData = canvas.toDataURL('image/png'); // Document of a4WidthMm wide and inputHeightMm high\n\n  if (inputHeightMm > a4HeightMm) {\n    // elongated a4 (system print dialog will handle page breaks)\n    const pdf = new jsPDF('p', 'mm', [inputHeightMm + 16, a4WidthMm]);\n  } else {\n    // standard a4\n    const pdf = new jsPDF();\n  }\n\n  pdf.addImage(imgData, 'PNG', 0, 0);\n  pdf.save(\"\".concat(id, \".pdf\"));\n});\n\nconst PrintButton = ({\n  id,\n  label\n}) => React.createElement(\"div\", {\n  className: \"tc mb4 mt2\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  id: \"myMm\",\n  style: {\n    height: \"1mm\"\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}), React.createElement(\"div\", {\n  className: \"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\",\n  onClick: () => {\n    const input = document.getElementById(id);\n    const inputHeightMm = pxToMm(input.offsetHeight);\n    const a4WidthMm = 210;\n    const a4HeightMm = 297;\n    const a4HeightPx = mmToPx(a4HeightMm);\n    const numPages = inputHeightMm <= a4HeightMm ? 1 : Math.floor(inputHeightMm / a4HeightMm) + 1;\n    console.log({\n      input,\n      inputHeightMm,\n      a4HeightMm,\n      a4HeightPx,\n      numPages,\n      range: range(0, numPages),\n      comp: inputHeightMm <= a4HeightMm,\n      inputHeightPx: input.offsetHeight\n    });\n    this.html2canvas(input); ////////////////////////////////////////////////////////\n    // System to manually handle page breaks\n    // Wasn't able to get it working !\n    // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n    // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n    ////////////////////////////////////////////////////////\n    // range(0, numPages).forEach((page) => {\n    //   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n    //   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n    //     .then((canvas) => {\n    //       const imgData = canvas.toDataURL('image/png');\n    //       console.log(imgData)\n    //       if (page > 0) {\n    //         pdf.addPage();\n    //       }\n    //       pdf.addImage(imgData, 'PNG', 0, 0);\n    //     });\n    //   ;\n    // });\n    // setTimeout(() => {\n    //   pdf.save(`${id}.pdf`);\n    // }, 5000);\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n}, label));\n\nexport default PrintButton;","map":{"version":3,"sources":["/var/www/html/ecommerce-app/src/Component/printbutton/printbutton.js"],"names":["React","html2canvas","jsPDF","pxToMm","px","Math","floor","document","getElementById","offsetHeight","mmToPx","mm","range","start","end","Array","join","split","map","val","id","input","then","canvas","imgData","toDataURL","inputHeightMm","a4HeightMm","pdf","a4WidthMm","addImage","save","PrintButton","label","height","a4HeightPx","numPages","console","log","comp","inputHeightPx"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,MAAM,GAAIC,EAAD,IAAQ;AACnB,SAAOC,IAAI,CAACC,KAAL,CAAWF,EAAE,GAAGG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,YAAhD,CAAP;AACH,CAFD;;AAIA,MAAMC,MAAM,GAAIC,EAAD,IAAQ;AACnB,SAAOJ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,YAAhC,GAA+CE,EAAtD;AACH,CAFD;;AAIA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC1B,SAAOC,KAAK,CAACD,GAAG,GAAGD,KAAP,CAAL,CAAmBG,IAAnB,CAAwB,CAAxB,EAA2BC,KAA3B,CAAiC,CAAjC,EAAoCC,GAApC,CAAwC,UAAUC,GAAV,EAAeC,EAAf,EAAmB;AAAE,WAAOA,EAAE,GAAGP,KAAZ;AAAmB,GAAhF,CAAP;AACH,CAFD;;AAIAZ,WAAW,CAACoB,KAAD,CAAX,CACCC,IADD,CACOC,MAAD,IAAY;AACd,QAAMC,OAAO,GAAGD,MAAM,CAACE,SAAP,CAAiB,WAAjB,CAAhB,CADc,CAGd;;AACA,MAAIC,aAAa,GAAGC,UAApB,EAAgC;AAC5B;AACA,UAAMC,GAAG,GAAG,IAAI1B,KAAJ,CAAU,GAAV,EAAe,IAAf,EAAqB,CAACwB,aAAa,GAAG,EAAjB,EAAqBG,SAArB,CAArB,CAAZ;AACH,GAHD,MAGO;AACH;AACA,UAAMD,GAAG,GAAG,IAAI1B,KAAJ,EAAZ;AACH;;AACD0B,EAAAA,GAAG,CAACE,QAAJ,CAAaN,OAAb,EAAsB,KAAtB,EAA6B,CAA7B,EAAgC,CAAhC;AACAI,EAAAA,GAAG,CAACG,IAAJ,WAAYX,EAAZ;AACH,CAdD;;AAkBA,MAAMY,WAAW,GAAG,CAAC;AAAEZ,EAAAA,EAAF;AAAMa,EAAAA;AAAN,CAAD,KAAoB;AAAK,EAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAKpC;AAAK,EAAA,EAAE,EAAC,MAAR;AAAe,EAAA,KAAK,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALoC,EAQpC;AACI,EAAA,SAAS,EAAC,qEADd;AAEI,EAAA,OAAO,EAAE,MAAM;AACX,UAAMb,KAAK,GAAGd,QAAQ,CAACC,cAAT,CAAwBY,EAAxB,CAAd;AACA,UAAMM,aAAa,GAAGvB,MAAM,CAACkB,KAAK,CAACZ,YAAP,CAA5B;AACA,UAAMoB,SAAS,GAAG,GAAlB;AACA,UAAMF,UAAU,GAAG,GAAnB;AACA,UAAMQ,UAAU,GAAGzB,MAAM,CAACiB,UAAD,CAAzB;AACA,UAAMS,QAAQ,GAAGV,aAAa,IAAIC,UAAjB,GAA8B,CAA9B,GAAkCtB,IAAI,CAACC,KAAL,CAAWoB,aAAa,GAAGC,UAA3B,IAAyC,CAA5F;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY;AACRjB,MAAAA,KADQ;AACDK,MAAAA,aADC;AACcC,MAAAA,UADd;AAC0BQ,MAAAA,UAD1B;AACsCC,MAAAA,QADtC;AACgDxB,MAAAA,KAAK,EAAEA,KAAK,CAAC,CAAD,EAAIwB,QAAJ,CAD5D;AAERG,MAAAA,IAAI,EAAEb,aAAa,IAAIC,UAFf;AAE2Ba,MAAAA,aAAa,EAAEnB,KAAK,CAACZ;AAFhD,KAAZ;AAIA,SAAKR,WAAL,CAAiBoB,KAAjB,EAXW,CAeX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGH,GA1CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA4CKY,KA5CL,CARoC,CAAxC;;AAwDA,eAAeD,WAAf","sourcesContent":["import React from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\n\nconst pxToMm = (px) => {\n    return Math.floor(px / document.getElementById('myMm').offsetHeight);\n};\n\nconst mmToPx = (mm) => {\n    return document.getElementById('myMm').offsetHeight * mm;\n};\n\nconst range = (start, end) => {\n    return Array(end - start).join(0).split(0).map(function (val, id) { return id + start });\n};\n\nhtml2canvas(input)\n.then((canvas) => {\n    const imgData = canvas.toDataURL('image/png');\n\n    // Document of a4WidthMm wide and inputHeightMm high\n    if (inputHeightMm > a4HeightMm) {\n        // elongated a4 (system print dialog will handle page breaks)\n        const pdf = new jsPDF('p', 'mm', [inputHeightMm + 16, a4WidthMm]);\n    } else {\n        // standard a4\n        const pdf = new jsPDF();\n    }\n    pdf.addImage(imgData, 'PNG', 0, 0);\n    pdf.save(`${id}.pdf`);\n});\n\n\n\nconst PrintButton = ({ id, label }) => (<div className=\"tc mb4 mt2\">\n    {/*\n    Getting pixel height in milimeters:\n    https://stackoverflow.com/questions/7650413/pixel-to-mm-equation/27111621#27111621\n  */}\n    <div id=\"myMm\" style={{ height: \"1mm\" }} />\n\n\n    <div\n        className=\"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\"\n        onClick={() => {\n            const input = document.getElementById(id);\n            const inputHeightMm = pxToMm(input.offsetHeight);\n            const a4WidthMm = 210;\n            const a4HeightMm = 297;\n            const a4HeightPx = mmToPx(a4HeightMm);\n            const numPages = inputHeightMm <= a4HeightMm ? 1 : Math.floor(inputHeightMm / a4HeightMm) + 1;\n            console.log({\n                input, inputHeightMm, a4HeightMm, a4HeightPx, numPages, range: range(0, numPages),\n                comp: inputHeightMm <= a4HeightMm, inputHeightPx: input.offsetHeight\n            });\n            this.html2canvas(input);\n\n           \n\n            ////////////////////////////////////////////////////////\n            // System to manually handle page breaks\n            // Wasn't able to get it working !\n            // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n            // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n            ////////////////////////////////////////////////////////\n            // range(0, numPages).forEach((page) => {\n            //   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n            //   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n            //     .then((canvas) => {\n            //       const imgData = canvas.toDataURL('image/png');\n            //       console.log(imgData)\n            //       if (page > 0) {\n            //         pdf.addPage();\n            //       }\n            //       pdf.addImage(imgData, 'PNG', 0, 0);\n            //     });\n            //   ;\n            // });\n\n            // setTimeout(() => {\n            //   pdf.save(`${id}.pdf`);\n            // }, 5000);\n\n\n        }}\n    >\n        {label}\n    </div>\n</div>);\n\nexport default PrintButton;"]},"metadata":{},"sourceType":"module"}